{"version":3,"sources":["background.jpg","Portal/users.js","Portal/CustomForgotPassword.js","Portal/CustomLoginPage.js","Portal/FIREBASE_CONFIG.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","even","backgroundColor","odd","ColoredChipField","props","num","classes","ChipField","className","classnames","record","source","isOdd","PostFilter","Filter","TextInput","label","alwaysOn","UserList","List","filters","Datagrid","rowClick","TextField","EmailField","UserShow","Show","SimpleShowLayout","UserEdit","Edit","SimpleForm","BooleanInput","RadioButtonGroupInput","choices","id","name","UserCreate","Create","AlertDialog","React","useState","open","setOpen","email","setEmail","toastOpen","setToastOpen","toastMessage","setToastMessage","handleClose","handleSubmit","a","console","log","firebase","auth","sendPasswordResetEmail","message","Button","variant","style","marginLeft","marginRight","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","type","width","onChange","event","target","value","DialogActions","color","autoFocus","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","uiConfig","signInFlow","signInSuccessUrl","SignInScreen","firebaseAuth","CustomLoginForm","LoginForm","CustomLoginPage","Login","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","options","logging","rootRef","dataProvider","FirebaseDataProvider","config","authProvider","FirebaseAuthProvider","MyLoginPage","backgroundImage","bg","App","Admin","loginPage","Resource","list","show","icon","UserIcon","edit","create","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.75494afd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.6d146e7e.jpg\";","import * as React from \"react\";\r\nimport { List, Datagrid, TextField, EmailField,\r\n    Show,\r\n    Create,\r\n    Edit,\r\n    SimpleShowLayout,\r\n    SimpleForm,\r\n    TextInput,\r\n    BooleanInput,\r\n    RadioButtonGroupInput,\r\n    ChipField,\r\n    Filter\r\n    } from 'react-admin';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport classnames from \"classnames\";\r\n\r\n    \r\nconst useStyles = makeStyles({\r\n  even: { backgroundColor: \"#74fd74\" },\r\n  odd: { backgroundColor: \"#ff7373\" }\r\n});\r\n\r\nconst ColoredChipField = props => {\r\n  const classes = useStyles();\r\n\r\n  const isEven = num => num === true;\r\n  const isOdd = num => num !== true;\r\n\r\n  return (\r\n    <ChipField\r\n      className={classnames({\r\n        [classes.even]: isEven(props.record[props.source]),\r\n        [classes.odd]: isOdd(props.record[props.source])\r\n      })}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n    const PostFilter = (props) => (\r\n      <Filter {...props}>\r\n          <TextInput label=\"Display Name\" source=\"displayName\" alwaysOn />\r\n      </Filter>\r\n  );\r\n\r\nexport const UserList = props => (\r\n    <List  filters={<PostFilter />}{...props}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"displayName\" />\r\n            <EmailField source=\"email\" />\r\n            <TextField source=\"isTutor\" />\r\n            <ColoredChipField source=\"isTutor\" />\r\n            <TextField source=\"isTutorRequested\" />\r\n            <TextField source=\"university\" />\r\n            <TextField source=\"role\" />\r\n\r\n        </Datagrid>\r\n    </List>\r\n);\r\nexport const UserShow = (props) => (\r\n    <Show {...props}>\r\n      <SimpleShowLayout>\r\n        <TextField source=\"id\" />\r\n        <TextField source=\"displayName\" />\r\n        <TextField source=\"username\" />\r\n        <TextField source=\"createdate\" />\r\n        <TextField source=\"lastupdate\" />\r\n        <TextField source=\"isTutor\" />\r\n        <ColoredChipField source=\"isTutor\" />\r\n        <TextField source=\"isTutorRequested\" />\r\n        <TextField source = \"updatedby\"/>\r\n        <TextField source=\"role\" />\r\n      </SimpleShowLayout>\r\n    </Show>\r\n);\r\nexport const UserEdit = (props) => (\r\n    <Edit {...props}>\r\n      <SimpleForm>\r\n        <TextField source=\"id\" />\r\n        <TextInput source=\"displayName\" />\r\n        <TextInput source=\"email\" />\r\n        <TextInput source=\"university\" />\r\n        <BooleanInput source=\"isTutor\" />\r\n        <BooleanInput source=\"isTutorRequested\" />\r\n        <RadioButtonGroupInput source=\"role\" choices={[\r\n        { id: 'Tutor', name: 'Tutor' },\r\n        { id: 'Stuednt', name: 'Student' },\r\n        { id: 'Admin', name: 'Admin' },\r\n          ]} />\r\n         </SimpleForm>   \r\n         </Edit>\r\n);\r\nexport const UserCreate = (props) => (\r\n    <Create {...props}>\r\n      <SimpleForm>\r\n        <TextInput source=\"id\" />\r\n        <TextInput source=\"displayName\" />\r\n        <TextInput source=\"email\" />\r\n        <BooleanInput source=\"isTutor\" />\r\n        <BooleanInput source=\"isTutorRequested\" />\r\n        <TextInput source=\"university\" />\r\n        </SimpleForm>   \r\n         </Create>\r\n);\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Snackbar,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\n\r\nimport firebase from \"firebase\";\r\n\r\nexport default function AlertDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [email, setEmail] = React.useState(\"\");\r\n\r\n  const [toastOpen, setToastOpen] = React.useState(false);\r\n  const [toastMessage, setToastMessage] = React.useState(\"\");\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleSubmit = async () => {\r\n    console.log(\"sending email to: \", email);\r\n    try {\r\n      await firebase.auth().sendPasswordResetEmail(email);\r\n      setOpen(false);\r\n      setToastOpen(true);\r\n      setToastMessage(\"Password reset email sent!\");\r\n    } catch (error) {\r\n      setToastOpen(true);\r\n      setToastMessage(error.message);\r\n    }\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    const email = event.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const handleToastClose = () => {\r\n    setToastOpen(false);\r\n    setToastOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"contained\" style={{backgroundColor : \"#3f51b5\", marginLeft:\"60px\", marginRight:\"60px\"}} onClick={handleClickOpen}>\r\n        Forgot Password?\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">Send Password Reset?</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            A password reset will be sent to the following email:\r\n          </DialogContentText>\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Email\"\r\n            type=\"email\"\r\n            variant=\"outlined\"\r\n            style={{width: '100%'}}\r\n            onChange={handleOnChange}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={handleSubmit} color=\"primary\" autoFocus>\r\n            Send Email\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Snackbar\r\n        open={toastOpen}\r\n        onClose={handleToastClose}\r\n        autoHideDuration={6000}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"center\",\r\n        }}\r\n        message={toastMessage}\r\n      ></Snackbar>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport { Login, LoginForm } from \"react-admin\";\r\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\r\nimport firebase from 'firebase';\r\nimport ForgotPasswordButton from './CustomForgotPassword'\r\n\r\n// Configure FirebaseUI.\r\nconst uiConfig = {\r\n  // Popup signin flow rather than redirect flow.\r\n  signInFlow: 'popup',\r\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\r\n  signInSuccessUrl: '#/',\r\n  // We will display Google and Facebook as auth providers.\r\n \r\n};\r\n\r\n\r\n\r\nconst SignInScreen = () => <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()}/>;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst CustomLoginForm = props => (\r\n  <div>\r\n    <LoginForm {...props} />\r\n    <ForgotPasswordButton {...props} />\r\n    <SignInScreen />\r\n  </div>\r\n);\r\n\r\nconst CustomLoginPage = props => (\r\n  <Login {...props}>\r\n    <CustomLoginForm {...props}/>\r\n  </Login>\r\n);\r\nexport default CustomLoginPage;","export const firebaseConfig = {\r\n  apiKey: \"AIzaSyDGoHy_tJDI0M-5h-kMUb3CICG3JSNHqIo\",\r\n  authDomain: \"flutter-excellia.firebaseapp.com\",\r\n  databaseURL: \"https://flutter-excellia.firebaseio.com\",\r\n  projectId: \"flutter-excellia\",\r\n  storageBucket: \"flutter-excellia.appspot.com\",\r\n  messagingSenderId: \"878484389533\",\r\n  appId: \"1:878484389533:web:bf35b5a4973e9ac0e79e74\"\r\n};","import * as React from \"react\";\r\n/* import { PostList, PostShow, PostCreate, PostEdit } from \"./posts\";\r\nimport { CommentList, CommentShow, CommentCreate, CommentEdit } from \"./comments\"; */\r\nimport { UserList, UserShow, UserEdit, UserCreate } from './Portal/users';\r\nimport { Admin, Resource } from \"react-admin\";\r\nimport {\r\n  FirebaseDataProvider,\r\n  FirebaseAuthProvider\r\n} from \"react-admin-firebase\";\r\n/* import CommentIcon from '@material-ui/icons/Comment';\r\n */import CustomLoginPage from './Portal/CustomLoginPage';\r\nimport UserIcon from '@material-ui/icons/Group';\r\n\r\n\r\nimport { firebaseConfig as config } from './Portal/FIREBASE_CONFIG';\r\nimport bg from './background.jpg'\r\nconst options = {\r\n  logging: true,\r\n  rootRef: '/'\r\n}\r\nconst dataProvider = FirebaseDataProvider(config, options);\r\nconst authProvider = FirebaseAuthProvider(config, options);\r\nconst MyLoginPage = () => <CustomLoginPage backgroundImage={bg} />;\r\n\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Admin \r\n        loginPage={MyLoginPage} \r\n        dataProvider={dataProvider}\r\n        authProvider={authProvider}\r\n      >\r\n       {/*  <Resource\r\n          name=\"posts\"\r\n          list={PostList}\r\n          show={PostShow}\r\n          create={PostCreate}\r\n          edit={PostEdit}\r\n        />\r\n        <Resource\r\n          name=\"comments\"\r\n          icon={CommentIcon}\r\n          list={CommentList}\r\n          show={CommentShow}\r\n          create={CommentCreate}\r\n          edit={CommentEdit}\r\n        /> */}\r\n        <Resource\r\n          name=\"users\"\r\n          list={UserList}\r\n          show={UserShow}\r\n          icon={UserIcon}\r\n          edit={UserEdit}\r\n          create={UserCreate}\r\n        />\r\n      </Admin>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}