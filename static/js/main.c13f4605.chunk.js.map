{"version":3,"sources":["users.js","CustomLoginPage.js","FIREBASE_CONFIG.js","App.js","registerServiceWorker.js","index.js"],"names":["UserList","props","List","Datagrid","rowClick","TextField","source","EmailField","UserShow","Show","SimpleShowLayout","UserEdit","Edit","SimpleForm","TextInput","UserCreate","Create","CustomLoginForm","style","fontFamily","marginLeft","LoginForm","CustomLoginPage","Login","loginForm","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","options","logging","rootRef","dataProvider","FirebaseDataProvider","config","authProvider","FirebaseAuthProvider","App","Admin","loginPage","Resource","name","list","show","icon","UserIcon","edit","create","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c13f4605.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { List, Datagrid, TextField, EmailField,\r\n    Show,\r\n    Create,\r\n    Edit,\r\n    SimpleShowLayout,\r\n    SimpleForm,\r\n    TextInput,\r\n    } from 'react-admin';\r\n\r\nexport const UserList = props => (\r\n    <List {...props}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"displayName\" />\r\n            <EmailField source=\"email\" />\r\n            <TextField source=\"university\" />\r\n            <TextField source=\"role\" />\r\n\r\n        </Datagrid>\r\n    </List>\r\n);\r\nexport const UserShow = (props) => (\r\n    <Show {...props}>\r\n      <SimpleShowLayout>\r\n        <TextField source=\"id\" />\r\n        <TextField source=\"displayName\" />\r\n        <TextField source=\"username\" />\r\n        <TextField source=\"createdate\" />\r\n        <TextField source=\"lastupdate\" />\r\n        <TextField source=\"role\" />\r\n      </SimpleShowLayout>\r\n    </Show>\r\n);\r\nexport const UserEdit = (props) => (\r\n    <Edit {...props}>\r\n      <SimpleForm>\r\n        <TextField source=\"id\" />\r\n        <TextInput source=\"displayName\" />\r\n        <TextInput source=\"email\" />\r\n        <TextInput source=\"university\" />\r\n        <TextInput source=\"role\" />\r\n         </SimpleForm>   \r\n         </Edit>\r\n);\r\nexport const UserCreate = (props) => (\r\n    <Create {...props}>\r\n      <SimpleForm>\r\n        <TextInput source=\"id\" />\r\n        <TextInput source=\"displayName\" />\r\n        <TextInput source=\"email\" />\r\n        <TextInput source=\"university\" />\r\n        </SimpleForm>   \r\n         </Create>\r\n);\r\n","// LoginPage.js\r\nimport React from \"react\";\r\nimport { Login, LoginForm } from \"react-admin\";\r\n\r\nconst CustomLoginForm = props => (\r\n  <div>\r\n    <div style={{fontFamily: \"monospace\", marginLeft: '15px'}}>\r\n      <p>Username: test@example.com</p>\r\n      <p>Password: password</p>\r\n    </div>\r\n    <LoginForm {...props} />\r\n  </div>\r\n);\r\n\r\nconst CustomLoginPage = props => (\r\n  <Login loginForm={<CustomLoginForm />} {...props} />\r\n);\r\n\r\nexport default CustomLoginPage;\r\n","export const firebaseConfig = {\r\n  apiKey: \"AIzaSyDGoHy_tJDI0M-5h-kMUb3CICG3JSNHqIo\",\r\n  authDomain: \"flutter-excellia.firebaseapp.com\",\r\n  databaseURL: \"https://flutter-excellia.firebaseio.com\",\r\n  projectId: \"flutter-excellia\",\r\n  storageBucket: \"flutter-excellia.appspot.com\",\r\n  messagingSenderId: \"878484389533\",\r\n  appId: \"1:878484389533:web:bf35b5a4973e9ac0e79e74\"\r\n};","import * as React from \"react\";\r\n/* import { PostList, PostShow, PostCreate, PostEdit } from \"./posts\";\r\nimport { CommentList, CommentShow, CommentCreate, CommentEdit } from \"./comments\"; */\r\nimport { UserList, UserShow, UserEdit, UserCreate } from './users';\r\nimport { Admin, Resource } from \"react-admin\";\r\nimport {\r\n  FirebaseDataProvider,\r\n  FirebaseAuthProvider\r\n} from \"react-admin-firebase\";\r\n/* import CommentIcon from '@material-ui/icons/Comment';\r\n */import CustomLoginPage from './CustomLoginPage';\r\nimport UserIcon from '@material-ui/icons/Group';\r\n\r\n\r\nimport { firebaseConfig as config } from './FIREBASE_CONFIG';\r\n\r\nconst options = {\r\n  logging: true,\r\n  rootRef: '/'\r\n}\r\nconst dataProvider = FirebaseDataProvider(config, options);\r\nconst authProvider = FirebaseAuthProvider(config, options);\r\n\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Admin \r\n        loginPage={CustomLoginPage} \r\n        dataProvider={dataProvider}\r\n        authProvider={authProvider}\r\n      >\r\n       {/*  <Resource\r\n          name=\"posts\"\r\n          list={PostList}\r\n          show={PostShow}\r\n          create={PostCreate}\r\n          edit={PostEdit}\r\n        />\r\n        <Resource\r\n          name=\"comments\"\r\n          icon={CommentIcon}\r\n          list={CommentList}\r\n          show={CommentShow}\r\n          create={CommentCreate}\r\n          edit={CommentEdit}\r\n        /> */}\r\n        <Resource\r\n          name=\"users\"\r\n          list={UserList}\r\n          show={UserShow}\r\n          icon={UserIcon}\r\n          edit={UserEdit}\r\n          create={UserCreate}\r\n        />\r\n      </Admin>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}